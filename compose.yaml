# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
  auth-db:
    image: postgres:15
    container_name: auth-db
    environment:
      POSTGRES_DB: service-auth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - auth-data:/var/lib/postgresql/data

  post-db:
    image: postgres:15
    container_name: post-db
    environment:
      POSTGRES_DB: service-post
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    ports:
      - "5433:5432"
    volumes:
      - post-data:/var/lib/postgresql/data

  message-db:
    image: postgres:15
    container_name: message-db
    environment:
      POSTGRES_DB: service-message
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    ports:
      - "5434:5432"
    volumes:
      - message-data:/var/lib/postgresql/data

  profile-db:
    image: postgres:15
    container_name: profile-db
    environment:
      POSTGRES_DB: service-profile
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    ports:
      - "5435:5432"
    volumes:
      - profile-data:/var/lib/postgresql/data
  eureka:
    build: ./backend/eurukaserver
    ports:
      - "8761:8761"
    environment:
      - SPRING_APPLICATION_NAME=eurukaserver
      - SERVER_PORT=8761
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
  post:
    build: ./backend/service-post
    ports:
      - "8084:8084"
    environment:
      - SPRING_APPLICATION_NAME=service-post
      - SERVER_PORT=8084
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://post-db:5432/service-post
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=admin
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - AWS_REGION=ap-southeast-1
      - AWS_S3_BUCKET=connecthubs3
      - SPRING_KAFKA_CONSUMER_GROUP_ID=service-post
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER=org.apache.kafka.common.serialization.StringDeserializer
      - SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      - SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_DESERIALIZER_VALUE_DELEGATE_CLASS=org.springframework.kafka.support.serializer.JsonDeserializer
      - SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_TRUSTED_PACKAGES=*
      - SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest
      - SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_TYPE_MAPPING=UserRegisteredEvent:hoangworthy.project.microservices.servicepost.events.UserRegisteredEvent,ProfileUpdateEvent:hoangworthy.project.microservices.servicepost.events.ProfileUpdateEvent
    depends_on:
      - post-db
      - eureka
  auth:
    build: ./backend/service-auth
    ports:
      - "8080:8080"
    environment:
      - SPRING_APPLICATION_NAME=service-auth
      - SPRING_DATASOURCE_URL=jdbc:postgresql://auth-db:5432/service-auth
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=admin
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - JWT_REFRESHKEY=L/C9GrslkqKbQrQ9RgFdjdeOIGkPIFwuG0wWFr1Pv7Y=
      - JWT_REFRESHEXPIRATION=604800000
      - JWT_ACCESSKEY=EeGS4YPZXw9n2mYrd7fGGiyLwFJ7SEs2OmeSVfDfq6U=
      - JWT_ACCESSEXPIRATION=1800000
      - SPRING_DATA_REDIS_HOST=localhost
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.springframework.kafka.support.serializer.JsonSerializer
      - SPRING_KAFKA_PRODUCER_KEY_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer
      - SPRING_KAFKA_PRODUCER_ACKS=all
      - SPRING_KAFKA_PRODUCER_RETRIES=1
      - SPRING_KAFKA_PRODUCER_PROPERTIES_SPRING_JSON_TYPE_MAPPING=UserRegisteredEvent:hoangworthy.project.microservices.serviceauth.events.UserRegisteredEvent
      - SPRING_KAFKA_PRODUCER_PROPERTIES_ENABLE_IDEMPOTENCE=true
      - SPRING_KAFKA_PRODUCER_PROPERTIES_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION=5
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka:8761/eureka/
    depends_on:
      - auth-db
      - eureka
  message:
    build: ./backend/service-message
    ports:
      - "8083:8083"
    environment:
      - SPRING_APPLICATION_NAME=service-message
      - SERVER_PORT=8083
      - SPRING_DATASOURCE_URL=jdbc:postgresql://message-db:5432/service-message
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=admin
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka:8761/eureka/
    depends_on:
      - message-db
      - eureka
  profile:
    build: ./backend/service-profile
    ports:
      - "8081:8081"
    environment:
      - SPRING_APPLICATION_NAME=service-profile
      - SERVER_PORT=8081
      - SPRING_DATASOURCE_URL=jdbc:postgresql://profile-db:5432/service-profile
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=admin
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_KAFKA_CONSUMER_GROUP_ID=service-profile
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER=org.apache.kafka.common.serialization.StringDeserializer
      - SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      - SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_DESERIALIZER_VALUE_DELEGATE_CLASS=org.springframework.kafka.support.serializer.JsonDeserializer
      - SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_TRUSTED_PACKAGES=*
      - SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest
      - SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_TYPE_MAPPING=UserRegisteredEvent:hoangworthy.project.microservices.serviceprofile.events.UserRegisteredEvent
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.springframework.kafka.support.serializer.JsonSerializer
      - SPRING_KAFKA_PRODUCER_KEY_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer
      - SPRING_KAFKA_PRODUCER_ACKS=all
      - SPRING_KAFKA_PRODUCER_RETRIES=1
      - SPRING_KAFKA_PRODUCER_PROPERTIES_SPRING_JSON_TYPE_MAPPING=ProfileUpdateEvent:hoangworthy.project.microservices.serviceprofile.events.ProfileUpdateEvent
      - SPRING_KAFKA_PRODUCER_PROPERTIES_ENABLE_IDEMPOTENCE=true
      - SPRING_KAFKA_PRODUCER_PROPERTIES_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION=5
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka:8761/eureka/
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - AWS_REGION=ap-southeast-1
      - AWS_S3_BUCKET=connecthubs3
    depends_on:
      - profile-db
      - eureka
  apigateway:
    build: ./backend/apigateway
    ports:
      - "8082:8082"
    environment:
      - SPRING_APPLICATION_NAME=apigateway
      - SERVER_PORT=8082
      - JWT_REFRESHKEY=L/C9GrslkqKbQrQ9RgFdjdeOIGkPIFwuG0wWFr1Pv7Y=
      - JWT_REFRESHEXPIRATION=604800000
      - JWT_ACCESSKEY=EeGS4YPZXw9n2mYrd7fGGiyLwFJ7SEs2OmeSVfDfq6U=
      - JWT_ACCESSEXPIRATION=1800000
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_DISCOVERY_LOCATOR_ENABLED=true
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_DISCOVERY_LOCATOR_LOWER_CASE_SERVICE_ID=true
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka:8761/eureka
      - GATEWAY_ROUTE_0_ID=service-order
      - GATEWAY_ROUTE_0_URI=lb://SERVICE-AUTH
      - GATEWAY_ROUTE_0_PREDICATE=Path=/auth/**
      - GATEWAY_ROUTE_1_ID=service-profile
      - GATEWAY_ROUTE_1_URI=lb://SERVICE-PROFILE
      - GATEWAY_ROUTE_1_PREDICATE=Path=/profile/**
      - GATEWAY_ROUTE_2_ID=service-post
      - GATEWAY_ROUTE_2_URI=lb://SERVICE-POST
      - GATEWAY_ROUTE_2_PREDICATE=Path=/post/**
      - GATEWAY_ROUTE_3_ID=service-message
      - GATEWAY_ROUTE_3_URI=lb://SERVICE-MESSAGE
      - GATEWAY_ROUTE_3_PREDICATE=Path=/message/**
      - GATEWAY_ROUTE_4_ID=service-message-websocket
      - GATEWAY_ROUTE_4_URI=ws://localhost:8083
      - GATEWAY_ROUTE_4_PREDICATE=Path=/message/ws
    depends_on:
      - eureka
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    
    environment:
      - NEXT_PUBLIC_BACKEND_URL=http://apigateway:8082
volumes:
  kafka-data:
  auth-data:
  post-data:
  message-data:
  profile-data:

    # If your application exposes a port, uncomment the following lines and change
    # the port numbers as needed. The first number is the host port and the second
    # is the port inside the container.
    # ports:
    #   - 8080:8080

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
